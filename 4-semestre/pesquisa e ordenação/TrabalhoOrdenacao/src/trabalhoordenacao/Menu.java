/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalhoordenacao;

import arquivo.Arquivo;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import metodos.Metodos;

/**
 *
 * @author laboratorio
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form menu
     */
    public Menu() {
        initComponents();
    }
    
    ArrayList<Integer> listaArquivo = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        chkBolha = new javax.swing.JCheckBox();
        chkSelecao = new javax.swing.JCheckBox();
        chkInsercao = new javax.swing.JCheckBox();
        btnArquivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMetodos = new javax.swing.JTable();
        chkAgitacao = new javax.swing.JCheckBox();
        chkPente = new javax.swing.JCheckBox();
        chkShell = new javax.swing.JCheckBox();
        chkQuick = new javax.swing.JCheckBox();
        chkMerge = new javax.swing.JCheckBox();
        chkHeap = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnOrdenar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaSelecionados = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Métodos:");

        chkBolha.setText("Bolha");

        chkSelecao.setText("Seleção");

        chkInsercao.setText("Inserção");

        btnArquivo.setText("Carregar Arquivo");
        btnArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoActionPerformed(evt);
            }
        });

        tblMetodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Método", "Comparações", "Trocas", "Tempo (ns)"
            }
        ));
        jScrollPane1.setViewportView(tblMetodos);

        chkAgitacao.setText("Agitação");

        chkPente.setText("Pente");

        chkShell.setText("Shell");

        chkQuick.setText("Quick");

        chkMerge.setText("Merge");

        chkHeap.setText("Heap");

        jLabel2.setText("Quantidade:");

        txtQuantidade.setEditable(false);

        jLabel3.setText("Selecionados:");

        btnOrdenar.setText("Ordenar");
        btnOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarActionPerformed(evt);
            }
        });

        txaSelecionados.setColumns(20);
        txaSelecionados.setRows(5);
        jScrollPane2.setViewportView(txaSelecionados);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Métodos de Ordenação");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(chkAgitacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chkQuick)
                                    .addComponent(chkBolha)
                                    .addComponent(txtQuantidade))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkSelecao)
                                            .addComponent(chkMerge)
                                            .addComponent(chkPente))
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkInsercao)
                                            .addComponent(chkHeap)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(chkShell)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnOrdenar))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnArquivo)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnArquivo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(chkBolha)
                    .addComponent(chkSelecao)
                    .addComponent(chkInsercao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkAgitacao)
                    .addComponent(chkPente)
                    .addComponent(chkShell)
                    .addComponent(btnOrdenar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMerge)
                    .addComponent(chkQuick)
                    .addComponent(chkHeap))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoActionPerformed
        //limpar();
        int arquivo = jFileChooser1.showOpenDialog(this);
        //ArrayList<Integer> listaDoArquivo = new ArrayList<>();
        
        if (arquivo == JFileChooser.APPROVE_OPTION) {
            java.io.File arquivoSelecionado = jFileChooser1.getSelectedFile();
            Arquivo.leArquivo(listaArquivo, arquivoSelecionado);
            JOptionPane.showMessageDialog(this, "Arquivo carregado com sucesso");
            txtQuantidade.setText(String.valueOf(listaArquivo.size())); //quantos numeros tem na lista
        }
    }//GEN-LAST:event_btnArquivoActionPerformed

    private void btnOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarActionPerformed
        DefaultTableModel tabelaMetodos = (DefaultTableModel) tblMetodos.getModel();
        tabelaMetodos.setNumRows(0);
        
        if(chkBolha.isSelected()){
            txaSelecionados.append("Bolha\n");
            ArrayList<Integer> listaBolha = new ArrayList<>();
            listaBolha.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.bolha(listaBolha);
            tempoFim = System.nanoTime();
            
            Object[] obj = new Object[]{
                "Bolha",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
            
        }
        if(chkSelecao.isSelected()){
            txaSelecionados.append("Seleção\n");
            ArrayList<Integer> listaSelecao = new ArrayList<>();
            listaSelecao.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.selecao(listaSelecao);
            tempoFim = System.nanoTime();
            
            Object[] obj = new Object[]{
                "Seleção",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
        if(chkInsercao.isSelected()){
            txaSelecionados.append("Inserção\n");
            ArrayList<Integer> listaInsercao = new ArrayList<>();
            listaInsercao.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.insercao(listaInsercao);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Inserção",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
        if(chkAgitacao.isSelected()){
            txaSelecionados.append("Agitação\n");
            ArrayList<Integer> listaAgitacao = new ArrayList<>();
            listaAgitacao.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.agitacao(listaAgitacao);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Agitação",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
        if(chkPente.isSelected()){
            txaSelecionados.append("Pente\n");
            ArrayList<Integer> listaPente = new ArrayList<>();
            listaPente.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.pente(listaPente);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Pente",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
        if(chkShell.isSelected()){
            txaSelecionados.append("Shell\n");
            ArrayList<Integer> listaShell = new ArrayList<>();
            listaShell.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.shell(listaShell);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Shell",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
        
        if(chkQuick.isSelected()){
            txaSelecionados.append("Quick\n");
            ArrayList<Integer> listaQuick = new ArrayList<>();
            listaQuick.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.quick(listaQuick, 0, listaQuick.size() - 1);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Quick",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
        if(chkMerge.isSelected()){
            txaSelecionados.append("Merge\n");
            ArrayList<Integer> listaMerge = new ArrayList<>();
            listaMerge.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.merge(listaMerge, 0, listaMerge.size() - 1);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Merge",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
            
        }
        if(chkHeap.isSelected()){
            txaSelecionados.append("Heap\n");
            ArrayList<Integer> listaHeap = new ArrayList<>();
            listaHeap.addAll(listaArquivo);
            long tempoInicio, tempoFim;
            tempoInicio = System.nanoTime();
            int[] retorno = Metodos.heap(listaHeap);
            tempoFim = System.nanoTime();
            Object[] obj = new Object[]{
                "Heap",
                retorno[0],
                retorno[1],
                (tempoFim - tempoInicio)
            };      
            tabelaMetodos.addRow(obj);
        }
       
    }//GEN-LAST:event_btnOrdenarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArquivo;
    private javax.swing.JButton btnOrdenar;
    private javax.swing.JCheckBox chkAgitacao;
    private javax.swing.JCheckBox chkBolha;
    private javax.swing.JCheckBox chkHeap;
    private javax.swing.JCheckBox chkInsercao;
    private javax.swing.JCheckBox chkMerge;
    private javax.swing.JCheckBox chkPente;
    private javax.swing.JCheckBox chkQuick;
    private javax.swing.JCheckBox chkSelecao;
    private javax.swing.JCheckBox chkShell;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMetodos;
    private javax.swing.JTextArea txaSelecionados;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
